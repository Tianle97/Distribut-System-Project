package ie.gmit.sw.REST;

import java.net.MalformedURLException;
import java.rmi.Naming;
import java.rmi.NotBoundException;
import java.rmi.RemoteException;
import java.util.ArrayList;
import java.util.List;

import javax.ws.rs.GET;
import javax.ws.rs.Path;
import javax.ws.rs.PathParam;
import javax.ws.rs.Produces;
import javax.ws.rs.core.MediaType;

import ie.gmit.sw.Model.BookingCar;
import ie.gmit.sw.RMIClient.RMIServer;

/**
 * Root resource (exposed at "myresource" path)
 */
@Path("bookingSystem")
public class BookingResource extends BookingObjectMarshaller {
	
	//BookingCarServiceImp bcsImp ;
	

    /**
     * Method handling HTTP GET requests. The returned object will be sent
     * to the client as "text/plain" media type.
     *
     * @return String that will be returned as a text/plain response.
     * @throws RemoteException 
     */
	
//	@Path("/all")
//    @GET
//    @Produces(MediaType.APPLICATION_XML)
//    public List<BookingCar> getAll() throws RemoteException  {
//    	return bcsImp.getAll();
//    }
	
	List<BookingCar> orders = new ArrayList<BookingCar>();
	
	@GET
	@Produces({MediaType.APPLICATION_XML})
	@Path("/showAll")
	/* Note how this method has been annotated to produce both XML
	 * The response format which is sent will depend on the Accept: header field in the HTTP request from the client 
	 */
	public BookingCar getOrders() throws MalformedURLException, RemoteException, Exception  {
		RMIServer rs;
		rs = (RMIServer) Naming.lookup("rmi://127.0.0.1:1099/bookingCarService");
		List<BookingCar> allOrders = rs.getAll();
		for(BookingCar bc : allOrders)
		{
			System.out.println(bc.toString());
			
		}
		
		return (BookingCar) allOrders;		
	}
}
