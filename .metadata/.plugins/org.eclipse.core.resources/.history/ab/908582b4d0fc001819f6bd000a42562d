package ie.gmit.sw.Model;

import java.io.StringReader;
import java.io.StringWriter;

import javax.xml.bind.JAXBContext;
import javax.xml.bind.JAXBElement;
import javax.xml.bind.JAXBException;
import javax.xml.bind.Marshaller;
import javax.xml.bind.Unmarshaller;
import javax.xml.transform.stream.StreamSource;

public class JAXBPO {
	public JAXBPO(){
	}
	
	public String marshalBooking(BookingCar booking)
	{
		StringWriter stringWriter = new StringWriter();
		Marshaller xmlMarshaller;
		
		// Try and marshal the booking
		try
		{
			JAXBContext jaxb = JAXBContext.newInstance("ie.gmit.sw.BookingModel");
			
			// Create the unmarshaller
			xmlMarshaller = jaxb.createMarshaller();
			
			// Marshall the booking object as XML
			xmlMarshaller.setProperty(Marshaller.JAXB_FORMATTED_OUTPUT, Boolean.TRUE);
			xmlMarshaller.marshal(booking, stringWriter);
		} 
		catch (JAXBException e)
		{
			System.out.println("Error marshalling booking as XML: " + e);
		}
		
		// Return the XML generated from the object as a string using our stringWriter
		return stringWriter.toString();
	}
	
	// Function to unmarshal the XML to a Java object(BookingCar)
	protected BookingCar getBookingFromXML(String input) throws JAXBException {
		// Unmarshal the Booking from XML
		StringReader sr1 = new StringReader(input);
		Unmarshaller um1;
		BookingCar bookingFromXml = null;

		
			JAXBContext jc = JAXBContext.newInstance("ie.gmit.sw.ds.Model");
			um1 = jc.createUnmarshaller();
			StreamSource source1 = new StreamSource(sr1);
			JAXBElement<BookingCar> bookingElement1 = um1.unmarshal(source1, BookingCar.class);
			bookingFromXml = (BookingCar) bookingElement1.getValue();

		return bookingFromXml;
	}

}
