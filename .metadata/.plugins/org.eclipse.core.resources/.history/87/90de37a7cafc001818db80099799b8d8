package ie.gmit.sw.REST;

import java.net.MalformedURLException;
import java.rmi.Naming;
import java.rmi.NotBoundException;
import java.rmi.RemoteException;
import java.util.ArrayList;
import java.util.List;

import javax.ws.rs.Consumes;
import javax.ws.rs.FormParam;
import javax.ws.rs.GET;
import javax.ws.rs.POST;
import javax.ws.rs.Path;
import javax.ws.rs.PathParam;
import javax.ws.rs.Produces;
import javax.ws.rs.core.MediaType;
import javax.ws.rs.core.Response;

import ie.gmit.sw.Model.BookingCar;
import ie.gmit.sw.Model.JAXBPO;
import ie.gmit.sw.RMIClient.BookingCarServiceImp;
import ie.gmit.sw.RMIClient.RMIServer;

/**
 * Root resource (exposed at "myresource" path)
 */
@Path("bookingSystem")
public class BookingResource extends JAXBPO {
	
	//BookingCarServiceImp bcsImp ;
	private BookingCarServiceImp bookingCarServiceImp;
	JAXBPO jaxb = new JAXBPO();

	// Constructor
	public BookingResource() throws  RemoteException
	{
		bookingCarServiceImp = new BookingCarServiceImp();
	}

    /**
     * Method handling HTTP GET requests. The returned object will be sent
     * to the client as "text/plain" media type.
     *
     * @return String that will be returned as a text/plain response.
     * @throws RemoteException 
     */
	
	List<BookingCar> orders = new ArrayList<BookingCar>();
	
	
	
	
	@GET
	@Path("showAll")
	@Produces(MediaType.APPLICATION_XML)
	public List<BookingCar> getBookings() throws RemoteException {
		// Create a list of BookingObjects to store them in when retrieved from the database
		List<BookingCar> bookingCars = new ArrayList<BookingCar>();
		List<BookingCar> orders = new ArrayList<BookingCar>();
		
		
		
		bookingCars = bookingCarServiceImp.getAll();
				
		// Loop through all our bookingObjects and assign the variables from the bookingObject to our local objects
		// These can be located in the BookingModel package
		for(BookingCar bc : bookingCars)
		{
			BookingCar booking = new BookingCar();

			booking.setUserName(bc.getUserName());;
			booking.setCarName(bc.getCarName());;
			booking.setAddress(bc.getAddress());;
			booking.setStartDate(bc.getStartDate());;
			booking.setEndDate(bc.getEndDate());
			
			orders.add(booking);
		}
		
		System.out.println("Succesfully extracted info from remote object.");
		
		// Return the orders as XML
		return orders;
	}
	
	
	
	@GET
	@Produces({MediaType.APPLICATION_XML})
	@Path("/showAll")
	/* Note how this method has been annotated to produce both XML
	 * The response format which is sent will depend on the Accept: header field in the HTTP request from the client 
	 */
	public BookingCar getOrders() throws MalformedURLException, RemoteException, Exception  {
		RMIServer rs;
		rs = (RMIServer) Naming.lookup("rmi://127.0.0.1:1099/bookingCarService");
		List<BookingCar> allOrders = rs.getAll();
		for(BookingCar bc : allOrders)
		{
			System.out.println(bc.toString());
			
		}
		
		return (BookingCar) allOrders;		
	}
}
